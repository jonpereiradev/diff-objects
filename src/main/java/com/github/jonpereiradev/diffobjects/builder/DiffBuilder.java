package com.github.jonpereiradev.diffobjects.builder;

import com.github.jonpereiradev.diffobjects.DiffException;
import com.github.jonpereiradev.diffobjects.strategy.DiffMetadata;

import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;

/**
 * Responsible to map a class and fields to be able to generate diffs.
 *
 * @author jonpereiradev@gmail.com
 * @see DiffInstanceBuilder
 * @see DiffMappingBuilder
 * @see DiffConfiguration
 */
public final class DiffBuilder implements DiffInstanceBuilder {

    private final Map<String, DiffMetadata> metadatas;
    private final DiffMappingBuilder diffMappingBuilder;

    private DiffBuilder(Class<?> classMap) {
        this.metadatas = new LinkedHashMap<>();
        this.diffMappingBuilder = new DiffMappingBuilderImpl(classMap, metadatas, this);
    }

    /**
     * Creates a diff instance instance to map the diff elements of a class.
     *
     * @param clazz the class that will be registry to make diffs.
     * @return the diff instance instance.
     */
    public static DiffInstanceBuilder map(Class<?> clazz) {
        Objects.requireNonNull(clazz, "Class is required.");
        return new DiffBuilder(clazz);
    }

    /**
     * Gets the mapping instance to registry the fields used in the diff.
     *
     * @return a mapping instance instance.
     */
    @Override
    public DiffMappingBuilder mapper() {
        return diffMappingBuilder;
    }

    /**
     * Finds a mapping in the builder to make operations.
     *
     * @param field the name of the field mapped in the builder.
     * @return the instance of this mapping.
     */
    @Override
    public DiffQueryBuilder query(String field) {
        DiffMetadata diffMetadata = metadatas.get(field);

        if (diffMetadata == null) {
            throw new DiffException("No field \"" + field + "\" mapped in builder. You need to map the field before query.");
        }

        return new DiffQueryBuilderImpl(diffMetadata, this);
    }

    /**
     * Gets the configuration instance to get the configuration generated by this instance instance.
     *
     * @return a configuration instance instance.
     */
    @Override
    public DiffConfiguration configuration() {
        return new DiffConfigurationImpl(metadatas);
    }
}
