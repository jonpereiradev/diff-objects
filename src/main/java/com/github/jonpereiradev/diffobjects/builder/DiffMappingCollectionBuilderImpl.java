package com.github.jonpereiradev.diffobjects.builder;

import com.github.jonpereiradev.diffobjects.comparator.DiffComparator;
import com.github.jonpereiradev.diffobjects.comparator.EqualsComparator;
import com.github.jonpereiradev.diffobjects.strategy.DiffMetadata;
import com.github.jonpereiradev.diffobjects.strategy.DiffStrategyType;

import java.lang.reflect.Method;
import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

public class DiffMappingCollectionBuilderImpl<T> implements DiffMappingCollectionBuilder<T> {


    private final String fieldCollection;
    private final Map<String, DiffMetadata> cache;
    private final Map<String, DiffMetadata> metadatas;
    private final DiffComparator<?> collection;
    private final Class<T> classMap;

    private boolean mapping;

    DiffMappingCollectionBuilderImpl(Class<T> classMap, String fieldCollection, DiffComparator<?> comparator, Map<String, DiffMetadata> metadatas) {
        this.classMap = classMap;
        this.fieldCollection = fieldCollection;
        this.collection = comparator;
        this.cache = new HashMap<>();
        this.metadatas = metadatas;
    }

    /**
     * Maps the getter of the field for the class.
     *
     * @param field name of the field that will me used to find the getter method.
     *
     * @return the instance of this mapping.
     */
    @Override
    public DiffMappingCollectionBuilder<T> mapping(String field) {
        mapping(field, null, new EqualsComparator<>());
        return this;
    }

    /**
     * Maps the getter of the field for the class.
     *
     * @param field name of the field that will me used to find the getter method.
     * @param comparator implementation that define how two objects will be check for equality.
     *
     * @return the instance of this mapping.
     */
    @Override
    public <E> DiffMappingCollectionBuilder<T> mapping(String field, Class<E> fieldClass, DiffComparator<E> comparator) {
        Objects.requireNonNull(field, "Field name is required.");

        Method method = DiffReflections.discoverGetter(classMap, fieldCollection);
        DiffStrategyType diffStrategyType = DiffStrategyType.COLLECTION;
        DiffMetadata diffMetadata = new DiffMetadata(field, method, diffStrategyType, comparator, collection);

        diffMetadata.getProperties().put("field", field);

        cache.put(method.getName() + field, diffMetadata);
        mapping = true;

        return this;
    }

    /**
     * @return returns to the mapping object to continue the creation of the mapping.
     */
    @Override
    public DiffMappingBuilder<T> mappingBuilder() {
        apply();
        return new DiffMappingBuilderImpl<>(classMap, metadatas);
    }

    /**
     * Gets the configuration instance to get the configuration generated by this instance instance.
     *
     * @return a configuration instance instance.
     */
    @Override
    public DiffConfiguration configuration() {
        apply();
        return new DiffConfigurationImpl(metadatas);
    }

    @Override
    public void apply() {
        if (!mapping) {
            Method method = DiffReflections.discoverGetter(classMap, fieldCollection);
            DiffMetadata m = new DiffMetadata("", method, DiffStrategyType.COLLECTION, new EqualsComparator<>(), collection);

            cache.put(fieldCollection, m);
        }

        metadatas.putAll(cache);
    }
}
